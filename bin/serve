#!/usr/bin/env node
require('dotenv').load();

// This script will do the following:
//
// 1. On the process it's run on ('Master'), it will spin up the API server.
// 2. For each CPU on the system, it will create a new cluster node ('Node')
//    that will run an instance of the TCP server (tcp.js).
//
// The Master and Nodes communicate over the cluster module's built-in
// communication, using `process.send` to send messages from a Node to the
// Master, and `worker.send` to do the reverse.
//
// If a Node happens to crash, this will be logged to the debug console, and
// a new Node spun up to take it's place.

var cluster = require('cluster'), // node cluster library
    cpus = require('os').cpus(),
    db = require("../models"),
    Tessel = db.Tessel;

// The Debug module will only print to the console conditionally based on the
// setting of the 'DEBUG' environment variable. By default, it no-ops.
//
// So, if you wanted to log all master, API, and TCP activity, you'd run the
// command like this:
//
//    $ DEBUG=master,tcp*,api bin/serve
var debug = require('debug')('master');

var handleWorkerMessage = function (worker) {
  return function handleWorkerMessage(data) {
    if (!data.command) {
      return;
    }

    switch (data.command) {
      case 'add':
        cluster.connections[worker.id].push(data.data);
        Tessel
          .findOrCreate({ device_id: data.data }, {
            connected: true
          })
          .success(function(tessel, created){
            if (!created) {
              tessel.connected = true;
              tessel.save();
            }
          });
        break;

      case 'delete':
        var connections = cluster.connections[worker.id];
        for (var i = 0; i < connections.length; i++) {
          if (connections[i] === data.data) { connections.splice(i, 1); }
        }
        Tessel
          .find({where: {device_id: data.data}})
          .success(function(tessel){
            if (tessel){
              tessel.connected = false;
              tessel.save();
            }
          });
        break;

      case 'network':
        break;

      case 'log':
        break;

      default:
        return;
    }
  }
}

if (cluster.isMaster) {
  var app = require('../app'),
      port = process.env.PORT || 3000;

  debug('api starting');

  app.set('port', port);

  cluster.connections = {};

  var server = app.listen(app.get('port'), function() {
    debug('api listening on port %s', server.address().port)
  });

  cpus.forEach(function() {
    var worker = cluster.fork();
    cluster.connections[worker.id] = [];
    worker.on('message', handleWorkerMessage(worker));
  });

  cluster.on('exit', function(worker, code, signal) {
    debug('tcp worker %s died', worker.process.pid);
    delete cluster.connections[worker.id];
    cluster.fork();
  });
} else {
  var tcp = require('../worker'),
      port = process.env.TCP_PORT || 3001;

  debug('tcp server %s starting', process.pid);

  tcp.server.listen(port, function() {
    debug('tcp server %s listening on port %s', process.pid, port);
  });
}
